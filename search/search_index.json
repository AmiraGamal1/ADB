{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Advanced Database Labs","text":"<p>Welcome to the Advanced Database Lab course. This site provides hands-on labs to help you learn and simulate key concepts in concurrency control and database recovery techniques.</p>"},{"location":"#what-you-will-learn","title":"What You Will Learn","text":"<ul> <li>How to install and use MySQL, Python, and Visual Studio Code</li> <li>An understanding of transaction management and SQL implementation</li> <li>Understanding concurrency control mechanisms (2PL, Timestamp ordering)</li> <li>Understanding Database recovery techniques (ARIES)</li> <li>An introduction to database security practices:<ul> <li>Role-Based Access Control (RBAC)</li> <li>Data encryption</li> </ul> </li> </ul>"},{"location":"#tutorial-support-video","title":"Tutorial Support video","text":"<p>Many labs include video walkthroughs that demonstrate how to solve key theoretical examples step by step.</p> <ul> <li>Transaction schedules and conflicts</li> <li>Concurency Control mechanisms</li> <li>Database recovery Techniques</li> </ul> <p>Be sure to watch them alongside the written material for deeper understanding.</p>"},{"location":"#labs-overview","title":"Labs Overview","text":"<p>Each lab builds on the previous one. Please complete them in sequence:</p> <ol> <li>Lab 0: Environment Setup</li> <li>Lab 1: Basics of Transaction Management and Its Properties</li> <li>Lab 2: Concurrency Control Mechanisms</li> <li>Lab 3: Database Recovery Techniques (ARIES)</li> <li>Lab 4: Database Security Measures</li> </ol> <p>Note</p> <p>You can download a single PDF that contains all labs. It will be updated each time a new lab is uploaded. \ud83d\udcc4 Download\"</p>"},{"location":"#what-you-should-do","title":"What You Should Do","text":"<p>Each lab includes an assignment that you are expected to complete as part of the learning process. Please submit the assignments on time.</p>"},{"location":"Labs/Lab0/","title":"Setup environment","text":"<p>Objective:</p> <ul> <li>To set up MySQL Database Management System</li> <li>To connect to MySQL server</li> <li>To set up Python Programming Langauge</li> </ul> <p>Software:</p> <ul> <li>MySQL installer (offline version)</li> <li>Visual Studio code (VS code)</li> </ul>"},{"location":"Labs/Lab0/#prerequisites-install-microsoft-visual-c-2019-redistributable","title":"Prerequisites: Install Microsoft Visual C++ 2019 Redistributable","text":"<p> If you already have Microsoft Visual C++ 2019 Redistributable installed, you can skip this step and continue with the lab.</p> <ol> <li>Go to the official Microsoft page. Download VC++ Redistributables</li> <li>Download the file based on your system:<ul> <li>for 64-bit VC_redist.x64.exe</li> <li>for 32-bit VC_redist.x86.exe</li> </ul> </li> <li>Open the downloaded file and check on I agree to the license terms and conditions.      </li> <li>After installation, restart your PC.      </li> </ol>"},{"location":"Labs/Lab0/#mysql","title":"MySQL","text":"<p>MySQL is an open-source relational database management system (RDBMS) that uses SQL to create, manage, and query data.</p>"},{"location":"Labs/Lab0/#why-we-will-use-mysql","title":"Why we will use MySQL?","text":"<ol> <li>Support ACID transaction properites, essential for understanding transaction management</li> <li>Uses the InnoDB transactional storage engine, which supports concurrency control and recovery mechanisms</li> <li>Flexible and easy-to-use</li> </ol>"},{"location":"Labs/Lab0/#installing-mysql-offline","title":"Installing MySQL (Offline)","text":"<ol> <li>Go to the official MySQL Downloads Page</li> <li>Download the Windows (x86, 32-bit), MSI Installer (Offline version ~353.7M)      </li> <li>After open the Installer Choose Custom </li> <li>Select MySQL Servers and MySQL Workbench </li> <li>Proceed through the installation wizard</li> <li>Use the default port (3306)      </li> <li>Choose the Authentication Method as below      </li> <li>Create a root password</li> <li>Choose Windows Service as below      </li> <li>Proceed through the installation wizard untill finish</li> </ol>"},{"location":"Labs/Lab0/#what-after-install-mysql","title":"What after install MySQL?","text":"<ol> <li>After installing MySQL, connect to the MySQL Server. by clicking the <code>+</code> symbol next to MySQL Connections      </li> <li>In the dialog box, enter a Connection name, e.g.,<code>Local</code> </li> <li>Click Test Connection and enter your MySQL root password to verify the connection      </li> <li>After successfully connecting to the MySQL server, create a new database called <code>StudentDB</code>:<ul> <li>Open <code>local</code> connection</li> <li>Click Create new SQL from the top-left corner</li> <li>Write SQL commands to create the <code>StudentDB</code> database, a <code>Students</code> table, and insert sample data.</li> <li>Execute the Script using Execute button \u26a1  <pre><code>/*\nName: Amira Naser Aldeein\nIndex: 01x-xxx\nDepartment: e.g., CS\n*/\n\nCREATE DATABASE IF NOT EXISTS StudentDB;\nUSE StudentDB;\n\nCREATE TABLE Students (\n    StudentID INT PRIMARY KEY AUTO_INCREMENT,\n    FullName VARCHAR(100) NOT NULL,\n    Gender ENUM('M', 'F') NOT NULL,\n    BirthDate DATE,\n    Department VARCHAR(100),\n    GPA DECIMAL(3,2),\n    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Sample data\nINSERT INTO Students (FullName, Gender, BirthDate, Department, GPA) VALUES\n('Ali Ahmed', 'M', '2000-05-12', 'Computer Science', 3.45),\n('Sara Hassan', 'F', '2001-07-18', 'Information Systems', 3.78),\n('Omar Musa', 'M', '2002-03-25', 'Mathematics', 2.90);\n</code></pre></li> </ul> <p>Once you create the database, you will see it listed under the Schemas section on the left panel</p> </li> <li>Now you can run SQL queries on your new database      <pre><code>USE StudentDB;\nSELECT * FROM Students;\n</code></pre></li> </ol>"},{"location":"Labs/Lab0/#what-do-we-mean-by-connection-and-port","title":"What do we mean by Connection and Port?","text":"<p>A database connection is a communication link between a client application (e.g., MySQL Workbench) and the MySQL server. When an application (the client) needs to perform operations such as creating databases, running queries, or retrieving data, it establishes a connection to communicate with the server. The port is a communication endpoint on your machine. By default, MySQL uses port <code>3306</code> to listen for incoming client requests. In short, a connection is essential to allow your client tools or applications to interact with the MySQL server, run queries, manage data, and exchange information.</p>"},{"location":"Labs/Lab0/#python-programming-language","title":"Python programming language","text":"<p>We will use the Python programming language to simulate the following:     * Concurrency control algorithms     * Database recovery techniques</p>"},{"location":"Labs/Lab0/#download-and-install-python","title":"Download and Install Python","text":"<ol> <li>Go to the Python official website</li> <li>Download the latest stable version</li> <li>Open the installer and check <ul> <li>Add Python to PATH</li> </ul> </li> </ol>"},{"location":"Labs/Lab0/#download-and-install-vs-code","title":"Download and Install VS Code","text":"<ol> <li>Visit the website VS code Click on <code>Windows</code> to download VS code for Windows, as shown below </li> <li>After the download finished open the <code>VSCodeUserSetup</code> executable file, when it open select <code>I accept the agreement</code> then click on <code>Next</code> </li> <li>Select all the option as seen below </li> <li>Finally we are ready to install the VS code, click on <code>install</code> and wait untail the setup finish</li> <li>On the Vs code, on the left-hand side, click on <code>extension</code> then in the search bar, write <code>Python</code> select <code>Python microsoft</code> and click on <code>Install</code> as shown below </li> </ol>"},{"location":"Labs/Lab0/#alteranative-way-to-practice","title":"Alteranative way to practice:","text":"<pre><code>* Online Postgred server **[supabase](https://supabase.com/)**\n* Online Python Editer **[programiz](https://www.programiz.com/python-programming/online-compiler/)**\n</code></pre>"},{"location":"Labs/Lab0/#assignment-install-mysql-create-a-database-and-query-it","title":"Assignment: Install MySQL, Create a Database, and Query It","text":"<p>Due Date on 24/5/2025</p> <p> See the requirement about the structures of the lab here</p> <ol> <li>Download and Install MySQL</li> <li>Connect to the server</li> <li>Create a New Database</li> <li>Create a Table</li> <li>Insert Data</li> <li>Query the Data     <pre><code>USE DatabaseName;\nSELECT * FROM TableName;\n</code></pre></li> </ol>"},{"location":"Labs/Lab0/#what-to-assign","title":"What to assign:","text":"<p>Take Screenshots:</p> <ol> <li>SQL code (on MySQL)</li> <li>The output of your query</li> <li>Put it all on one document</li> </ol>"},{"location":"Labs/Lab1/","title":"Transaction Management and SQL Implementation","text":"<p>Objective:</p> <ul> <li>Understand the ACID properties.</li> <li>Implement SQL transactions.</li> <li>Understand transaction control.</li> </ul>"},{"location":"Labs/Lab1/#understanding-sql-transactions","title":"Understanding SQL Transactions","text":"<p>A Transaction is a sequence of read and write operations performed as a single logical unit of work.</p> <p>SQL Server operates in the following transaction modes:</p> <ol> <li>Autocommit transactions: Each individual statement is a transaction.</li> <li>Explicit transactions: Each transaction is explicitly started with the <code>BEGIN TRANSACTION</code> statement and explicitly ended with a <code>COMMIT</code> or <code>ROLLBACK</code> statement (which is concerned in this course).</li> <li>Implicit transactions: A new transaction is implicitly started when the prior transaction completes, but each transaction is explicitly completed with a <code>COMMIT</code> or <code>ROLLBACK</code> statement.</li> </ol>"},{"location":"Labs/Lab1/#sql-statement-for-transaction-control","title":"SQL statement for transaction control","text":""},{"location":"Labs/Lab1/#transaction-properties-and-how-sql-supports-them","title":"Transaction properties and how SQL supports them","text":"<p>Transaction properties (ACID):</p> <ol> <li>A - Atomicity: All actions in transaction happen, or none happen. \u201cAll or nothing\u2026\u201d</li> <li>C - Consistency: If each transaction is consistent and the database starts in a consistent state, it ends in a consistent state. \u201cIt looks correct to me\u2026\u201d</li> <li>I - Isolation: Execution of one transaction is isolated from other transactions. \u201cAll by myself\u2026\u201d</li> <li>D - Durability: Once a transaction commits, its effects are permanent. \u201cI will survive\u2026\u201d</li> </ol> <p>How SQL Supports Each Property?</p> properties SQL Feature Atomicity Use <code>START TRANSACTION</code>, followed by <code>COMMIT</code> or <code>ROLLBACK</code> Consistency Enforced through constraints (e.g., <code>PRIMARY KEY</code>, <code>FOREIGN KEY</code>, <code>CHECK</code>) Isolation Set using <code>SET TRANSACTION ISOLATION LEVEL</code> Durability Ensured by <code>COMMIT</code> and Logging mechanisms (e.g., write-ahead logs, redo logs)"},{"location":"Labs/Lab1/#why-concurrency-control-is-needed","title":"Why Concurrency Control is Needed","text":"<p>Several problems can occur when concurrent transactions execute without proper control, especially due to conflicting operations such as Read-Write, Write-Read, and Write-Write conflicts.</p> <p>Here is an illustrated problem with SQL transactions to simulate the problem:</p>"},{"location":"Labs/Lab1/#1-lost-update-problem","title":"1. Lost update problem","text":""},{"location":"Labs/Lab1/#2-the-temporary-update-or-dirty-read-problem","title":"2. The Temporary Update (or Dirty Read) Problem","text":"<p>This occurs when one transaction reads data that has been written by another transaction that hasn\u2019t committed yet. If the first transaction is later rolled back, the second transaction ends up working with invalid or temporary data \u2014 a dirty read.</p> <p>Example Scenario (Simulated):</p> <p>In an online electronics store:</p> <ol> <li> <p>Ahmed initiates a purchase of 200 laptops. A transaction begins and temporarily reduces the stock quantity to 0, but the transaction is not yet committed.</p> </li> <li> <p>Meanwhile, Mohamed checks the available stock and sees 0 laptops \u2014 based on User A\u2019s uncommitted change.</p> </li> <li> <p>Then, Ahmed cancels the purchase, and the transaction is rolled back. The stock returns to its original quantity (e.g., 200).</p> </li> <li> <p>However, Mohamed made a decision based on incorrect (temporary) data \u2014 the system gave them a dirty read.</p> </li> </ol> <p>SQL Transaction for the scienario:</p> <ol> <li>Create the <code>Products</code> table to simulate the scenario     <pre><code>-- Create ProductDB Database\nCREATE DATABASE IF NOT EXISTS ProductDB;\nUSE ProductDB;\n\n-- Create Products table\nCREATE TABLE Products (\n    Id INT PRIMARY KEY,\n    ProductName VARCHAR(100),\n    Quantity INT\n);\n\n-- Insert Sample data\nINSERT INTO Products (Id, ProductName, Quantity) VALUES\n(1, 'Mobile', 100),\n(2, 'Tablet', 50),\n(3, 'Laptop', 200);\n</code></pre></li> <li>In Session 1: Connect using the previous connection from Lab0 (named local), and open a new SQL query tab     <pre><code>USE ProductDB;\n\n-- Transaction 1: Simulate purchase\nSTART TRANSACTION;\n    -- Pay 200 units from product with ID = 3 (assumed to be a laptop)\n    UPDATE Products \n    SET Quantity = Quantity - 200\n    WHERE Id = 3;\n    -- Simulate waiting for payment confirmation\n    DO SLEEP(15);\n        -- Payment failed \u2014 rollback the transaction\nROLLBACK;\n</code></pre> We use SLEEP to simulate concurrent transactions. Note that <code>DO SLEEP(15)</code> works only in MySQL 8.0.29 or later</li> <li>Go to the Home tab and open the <code>local</code> connection again. (This step simulates a second session connected to the database.) Then, open a new SQL query tab to continue.     <pre><code>USE ProductDB;\n\n-- Transaction 2: Retrieve Laptop record\nSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\nSTART TRANSACTION;\n    SELECT *\n    FROM Products \n    WHERE Id=3;\nCOMMIT;\n</code></pre></li> <li>In Session 1: Run the transaction and wait      </li> <li>While Session 1 is still sleeping: Run Session 2      </li> <li>After Session 1 completes and rolls back      </li> <li>Conclusion: Session 2 was able to see the updated quantity (0 laptops) before Session 1 rolled back. This leads to inconsistent or misleading data, which is why isolation levels like `READ COMMITTED or REPEATABLE READ are important in real-world applications.</li> </ol>"},{"location":"Labs/Lab1/#3-the-incorrect-summary-problem","title":"3. The Incorrect Summary Problem","text":""},{"location":"Labs/Lab1/#assignment-simulate-the-unrepeatable-read-problem","title":"Assignment: Simulate The Unrepeatable Read Problem","text":"<p>Due Date on 14/6/2025</p> <ul> <li>Read page 752 on the primary book (FUNDAMENTALS OF Database Systems)</li> <li>See the requirement about the structures of the lab here</li> <li>You can use any SQL editor (Online or Local), but be cautious \u2014 transaction statements may vary slightly between different DBMSs, and the use of <code>DO SLEEP</code> depends on the specific database engine. For example, <code>DO SLEEP()</code> is supported in MySQL 8.0.29+, while in other systems or older versions, you may need to use <code>SELECT SLEEP()</code> or an alternative approach.</li> </ul>"},{"location":"Labs/Lab1/#what-to-assign","title":"What to assign:","text":"<ol> <li> <p>A paragraph describing the scenario you will use to simulate the Unrepeatable Read problem.</p> </li> <li> <p>A screenshot of the table you created for the simulation.</p> </li> <li> <p>A screenshot showing the result of the first transaction after execution.</p> </li> <li> <p>A screenshot showing the result of the second transaction after execution.</p> </li> <li> <p>A paragraph discussing what happened, and how it demonstrates the Unrepeatable Read issue.</p> </li> </ol>"},{"location":"Labs/general_instructions/","title":"General Instructions","text":""},{"location":"Labs/general_instructions/#please-follow-these-instructions-carefully","title":"Please follow these instructions carefully:","text":""},{"location":"Labs/general_instructions/#file-submission","title":"File Submission","text":"<ul> <li>At the top of your document, please include the following information:<ul> <li>Full Name</li> <li>Department</li> <li>Index Number</li> </ul> </li> <li>Submit your assignment as a single PDF file.</li> <li>The PDF must include all required screenshots (code and output).</li> </ul>"},{"location":"Labs/general_instructions/#lab-title","title":"Lab Title","text":"<p>Write the lab title as \"Lab 0, Lab 1, ...\" clearly at the top of your PDF.</p>"},{"location":"Labs/general_instructions/#screenshot-annotations","title":"Screenshot Annotations","text":"<p>On every screenshot containing SQL script, add a comment at the top with the following information:</p> <ol> <li>Student Name</li> <li>Department</li> <li>Student Index Number</li> </ol> <pre><code>    -- Name: student name\n    -- Department: Computer Science, ...\n    -- Index: 01x-xxx\n</code></pre>"},{"location":"Labs/general_instructions/#deadline","title":"Deadline","text":"<ol> <li> <p>Submissions must be uploaded before the deadline.</p> </li> <li> <p>Late submissions may be penalised according to the situations.</p> </li> </ol>"},{"location":"Labs/general_instructions/#plagiarism","title":"Plagiarism","text":"<ul> <li>You may discuss the assignment with other students, but all work must be completed individually.</li> <li>Plagiarism will be identified and penalized appropriately based on the circumstances.</li> <li>The use of AI tools to complete your tasks is not allowed. If detected, it will result in penalties.</li> </ul>"}]}